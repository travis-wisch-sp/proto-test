// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: approval.proto

// look into generic types in protobuf for "any"

package proto_go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_PENDING   Status = 0
	Status_APPROVED  Status = 1
	Status_REJECTED  Status = 2
	Status_EXPIRED   Status = 3
	Status_CANCELLED Status = 4
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "PENDING",
		1: "APPROVED",
		2: "REJECTED",
		3: "EXPIRED",
		4: "CANCELLED",
	}
	Status_value = map[string]int32{
		"PENDING":   0,
		"APPROVED":  1,
		"REJECTED":  2,
		"EXPIRED":   3,
		"CANCELLED": 4,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_approval_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_approval_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{0}
}

type Priority int32

const (
	Priority_LOW    Priority = 0
	Priority_MEDIUM Priority = 1
	Priority_HIGH   Priority = 2
)

// Enum value maps for Priority.
var (
	Priority_name = map[int32]string{
		0: "LOW",
		1: "MEDIUM",
		2: "HIGH",
	}
	Priority_value = map[string]int32{
		"LOW":    0,
		"MEDIUM": 1,
		"HIGH":   2,
	}
)

func (x Priority) Enum() *Priority {
	p := new(Priority)
	*p = x
	return p
}

func (x Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_approval_proto_enumTypes[1].Descriptor()
}

func (Priority) Type() protoreflect.EnumType {
	return &file_approval_proto_enumTypes[1]
}

func (x Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Priority.Descriptor instead.
func (Priority) EnumDescriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{1}
}

type Medium int32

const (
	Medium_EMAIL Medium = 0
	Medium_SLACK Medium = 1
	Medium_TEAMS Medium = 2
)

// Enum value maps for Medium.
var (
	Medium_name = map[int32]string{
		0: "EMAIL",
		1: "SLACK",
		2: "TEAMS",
	}
	Medium_value = map[string]int32{
		"EMAIL": 0,
		"SLACK": 1,
		"TEAMS": 2,
	}
)

func (x Medium) Enum() *Medium {
	p := new(Medium)
	*p = x
	return p
}

func (x Medium) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Medium) Descriptor() protoreflect.EnumDescriptor {
	return file_approval_proto_enumTypes[2].Descriptor()
}

func (Medium) Type() protoreflect.EnumType {
	return &file_approval_proto_enumTypes[2]
}

func (x Medium) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Medium.Descriptor instead.
func (Medium) EnumDescriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{2}
}

type ApprovalCriteriaType int32

const (
	ApprovalCriteriaType_SERIAL   ApprovalCriteriaType = 0
	ApprovalCriteriaType_PARALLEL ApprovalCriteriaType = 1
)

// Enum value maps for ApprovalCriteriaType.
var (
	ApprovalCriteriaType_name = map[int32]string{
		0: "SERIAL",
		1: "PARALLEL",
	}
	ApprovalCriteriaType_value = map[string]int32{
		"SERIAL":   0,
		"PARALLEL": 1,
	}
)

func (x ApprovalCriteriaType) Enum() *ApprovalCriteriaType {
	p := new(ApprovalCriteriaType)
	*p = x
	return p
}

func (x ApprovalCriteriaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApprovalCriteriaType) Descriptor() protoreflect.EnumDescriptor {
	return file_approval_proto_enumTypes[3].Descriptor()
}

func (ApprovalCriteriaType) Type() protoreflect.EnumType {
	return &file_approval_proto_enumTypes[3]
}

func (x ApprovalCriteriaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApprovalCriteriaType.Descriptor instead.
func (ApprovalCriteriaType) EnumDescriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{3}
}

type ApprovalCriteriaCalculationType int32

const (
	ApprovalCriteriaCalculationType_COUNT   ApprovalCriteriaCalculationType = 0
	ApprovalCriteriaCalculationType_PERCENT ApprovalCriteriaCalculationType = 1
)

// Enum value maps for ApprovalCriteriaCalculationType.
var (
	ApprovalCriteriaCalculationType_name = map[int32]string{
		0: "COUNT",
		1: "PERCENT",
	}
	ApprovalCriteriaCalculationType_value = map[string]int32{
		"COUNT":   0,
		"PERCENT": 1,
	}
)

func (x ApprovalCriteriaCalculationType) Enum() *ApprovalCriteriaCalculationType {
	p := new(ApprovalCriteriaCalculationType)
	*p = x
	return p
}

func (x ApprovalCriteriaCalculationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApprovalCriteriaCalculationType) Descriptor() protoreflect.EnumDescriptor {
	return file_approval_proto_enumTypes[4].Descriptor()
}

func (ApprovalCriteriaCalculationType) Type() protoreflect.EnumType {
	return &file_approval_proto_enumTypes[4]
}

func (x ApprovalCriteriaCalculationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApprovalCriteriaCalculationType.Descriptor instead.
func (ApprovalCriteriaCalculationType) EnumDescriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{4}
}

type AutoApproveType int32

const (
	AutoApproveType_AUTO_DIRECT   AutoApproveType = 0
	AutoApproveType_AUTO_INDIRECT AutoApproveType = 1
	AutoApproveType_AUTO_OFF      AutoApproveType = 2
)

// Enum value maps for AutoApproveType.
var (
	AutoApproveType_name = map[int32]string{
		0: "AUTO_DIRECT",
		1: "AUTO_INDIRECT",
		2: "AUTO_OFF",
	}
	AutoApproveType_value = map[string]int32{
		"AUTO_DIRECT":   0,
		"AUTO_INDIRECT": 1,
		"AUTO_OFF":      2,
	}
)

func (x AutoApproveType) Enum() *AutoApproveType {
	p := new(AutoApproveType)
	*p = x
	return p
}

func (x AutoApproveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AutoApproveType) Descriptor() protoreflect.EnumDescriptor {
	return file_approval_proto_enumTypes[5].Descriptor()
}

func (AutoApproveType) Type() protoreflect.EnumType {
	return &file_approval_proto_enumTypes[5]
}

func (x AutoApproveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AutoApproveType.Descriptor instead.
func (AutoApproveType) EnumDescriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{5}
}

type ApprovalConfigScope int32

const (
	ApprovalConfigScope_APPROVAL_REQUEST ApprovalConfigScope = 0
	ApprovalConfigScope_DOMAIN_OBJECT    ApprovalConfigScope = 1
	ApprovalConfigScope_APPROVAL_TYPE    ApprovalConfigScope = 2
	ApprovalConfigScope_TENANT           ApprovalConfigScope = 3
)

// Enum value maps for ApprovalConfigScope.
var (
	ApprovalConfigScope_name = map[int32]string{
		0: "APPROVAL_REQUEST",
		1: "DOMAIN_OBJECT",
		2: "APPROVAL_TYPE",
		3: "TENANT",
	}
	ApprovalConfigScope_value = map[string]int32{
		"APPROVAL_REQUEST": 0,
		"DOMAIN_OBJECT":    1,
		"APPROVAL_TYPE":    2,
		"TENANT":           3,
	}
)

func (x ApprovalConfigScope) Enum() *ApprovalConfigScope {
	p := new(ApprovalConfigScope)
	*p = x
	return p
}

func (x ApprovalConfigScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApprovalConfigScope) Descriptor() protoreflect.EnumDescriptor {
	return file_approval_proto_enumTypes[6].Descriptor()
}

func (ApprovalConfigScope) Type() protoreflect.EnumType {
	return &file_approval_proto_enumTypes[6]
}

func (x ApprovalConfigScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApprovalConfigScope.Descriptor instead.
func (ApprovalConfigScope) EnumDescriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{6}
}

type RequireCommentType int32

const (
	RequireCommentType_ALL       RequireCommentType = 0
	RequireCommentType_APPROVAL  RequireCommentType = 1
	RequireCommentType_REJECTION RequireCommentType = 2
	RequireCommentType_OFF       RequireCommentType = 3
)

// Enum value maps for RequireCommentType.
var (
	RequireCommentType_name = map[int32]string{
		0: "ALL",
		1: "APPROVAL",
		2: "REJECTION",
		3: "OFF",
	}
	RequireCommentType_value = map[string]int32{
		"ALL":       0,
		"APPROVAL":  1,
		"REJECTION": 2,
		"OFF":       3,
	}
)

func (x RequireCommentType) Enum() *RequireCommentType {
	p := new(RequireCommentType)
	*p = x
	return p
}

func (x RequireCommentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequireCommentType) Descriptor() protoreflect.EnumDescriptor {
	return file_approval_proto_enumTypes[7].Descriptor()
}

func (RequireCommentType) Type() protoreflect.EnumType {
	return &file_approval_proto_enumTypes[7]
}

func (x RequireCommentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequireCommentType.Descriptor instead.
func (RequireCommentType) EnumDescriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{7}
}

type ChainIdentityType int32

const (
	ChainIdentityType_IDENTITY             ChainIdentityType = 0
	ChainIdentityType_MANAGER_OF           ChainIdentityType = 1
	ChainIdentityType_GOVERNANCE_GROUP     ChainIdentityType = 2
	ChainIdentityType_SOURCE_OWNER         ChainIdentityType = 3
	ChainIdentityType_ROLE_OWNER           ChainIdentityType = 4
	ChainIdentityType_ACCESS_PROFILE_OWNER ChainIdentityType = 5
	ChainIdentityType_ENTITLEMENT_OWNER    ChainIdentityType = 6
)

// Enum value maps for ChainIdentityType.
var (
	ChainIdentityType_name = map[int32]string{
		0: "IDENTITY",
		1: "MANAGER_OF",
		2: "GOVERNANCE_GROUP",
		3: "SOURCE_OWNER",
		4: "ROLE_OWNER",
		5: "ACCESS_PROFILE_OWNER",
		6: "ENTITLEMENT_OWNER",
	}
	ChainIdentityType_value = map[string]int32{
		"IDENTITY":             0,
		"MANAGER_OF":           1,
		"GOVERNANCE_GROUP":     2,
		"SOURCE_OWNER":         3,
		"ROLE_OWNER":           4,
		"ACCESS_PROFILE_OWNER": 5,
		"ENTITLEMENT_OWNER":    6,
	}
)

func (x ChainIdentityType) Enum() *ChainIdentityType {
	p := new(ChainIdentityType)
	*p = x
	return p
}

func (x ChainIdentityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChainIdentityType) Descriptor() protoreflect.EnumDescriptor {
	return file_approval_proto_enumTypes[8].Descriptor()
}

func (ChainIdentityType) Type() protoreflect.EnumType {
	return &file_approval_proto_enumTypes[8]
}

func (x ChainIdentityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChainIdentityType.Descriptor instead.
func (ChainIdentityType) EnumDescriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{8}
}

type ApprovalRequestQuery struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ApprovalRequests []*ApprovalRequest     `protobuf:"bytes,1,rep,name=approvalRequests,proto3" json:"approvalRequests,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ApprovalRequestQuery) Reset() {
	*x = ApprovalRequestQuery{}
	mi := &file_approval_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApprovalRequestQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalRequestQuery) ProtoMessage() {}

func (x *ApprovalRequestQuery) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalRequestQuery.ProtoReflect.Descriptor instead.
func (*ApprovalRequestQuery) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{0}
}

func (x *ApprovalRequestQuery) GetApprovalRequests() []*ApprovalRequest {
	if x != nil {
		return x.ApprovalRequests
	}
	return nil
}

type ApprovalRequest struct {
	state                protoimpl.MessageState     `protogen:"open.v1"`
	Id                   string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TenantId             string                     `protobuf:"bytes,2,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	Approvers            []*Identity                `protobuf:"bytes,3,rep,name=approvers,proto3" json:"approvers,omitempty"`
	CreatedDate          *timestamppb.Timestamp     `protobuf:"bytes,4,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
	BatchRequest         *BatchRequest              `protobuf:"bytes,5,opt,name=batchRequest,proto3" json:"batchRequest,omitempty"`
	DueDate              *timestamppb.Timestamp     `protobuf:"bytes,6,opt,name=dueDate,proto3" json:"dueDate,omitempty"`
	Type                 string                     `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	Name                 []*LocaleField             `protobuf:"bytes,8,rep,name=name,proto3" json:"name,omitempty"`
	Description          []*LocaleField             `protobuf:"bytes,9,rep,name=description,proto3" json:"description,omitempty"`
	Priority             Priority                   `protobuf:"varint,10,opt,name=priority,proto3,enum=approval.request.Priority" json:"priority,omitempty"`
	Medium               []Medium                   `protobuf:"varint,11,rep,packed,name=medium,proto3,enum=approval.request.Medium" json:"medium,omitempty"`
	Requester            *Identity                  `protobuf:"bytes,12,opt,name=requester,proto3" json:"requester,omitempty"`
	Requestee            *Identity                  `protobuf:"bytes,13,opt,name=requestee,proto3" json:"requestee,omitempty"`
	Comments             []*Comment                 `protobuf:"bytes,14,rep,name=comments,proto3" json:"comments,omitempty"`
	ApprovalCriteria     *ApprovalCriteria          `protobuf:"bytes,15,opt,name=approvalCriteria,proto3" json:"approvalCriteria,omitempty"`
	ApprovedBy           []*Identity                `protobuf:"bytes,16,rep,name=ApprovedBy,proto3" json:"ApprovedBy,omitempty"`
	RejectedBy           []*Identity                `protobuf:"bytes,17,rep,name=RejectedBy,proto3" json:"RejectedBy,omitempty"`
	CompletedDate        *timestamppb.Timestamp     `protobuf:"bytes,18,opt,name=completedDate,proto3" json:"completedDate,omitempty"`
	Status               Status                     `protobuf:"varint,19,opt,name=status,proto3,enum=approval.request.Status" json:"status,omitempty"`
	RequestedTarget      *RequestedTarget           `protobuf:"bytes,20,opt,name=requestedTarget,proto3" json:"requestedTarget,omitempty"`
	ReferenceData        []*Reference               `protobuf:"bytes,21,rep,name=referenceData,proto3" json:"referenceData,omitempty"`
	AdditionalAttributes map[string]*structpb.Value `protobuf:"bytes,22,rep,name=additionalAttributes,proto3" json:"additionalAttributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AutoApprove          AutoApproveType            `protobuf:"varint,23,opt,name=autoApprove,proto3,enum=approval.request.AutoApproveType" json:"autoApprove,omitempty"`
	ApprovalConfig       *ApprovalConfig            `protobuf:"bytes,24,opt,name=approvalConfig,proto3" json:"approvalConfig,omitempty"`
	SerialStep           uint64                     `protobuf:"varint,25,opt,name=serialStep,proto3" json:"serialStep,omitempty"`
	EscalationStep       uint64                     `protobuf:"varint,26,opt,name=escalationStep,proto3" json:"escalationStep,omitempty"`
	CoolField            string                     `protobuf:"bytes,27,opt,name=coolField,proto3" json:"coolField,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ApprovalRequest) Reset() {
	*x = ApprovalRequest{}
	mi := &file_approval_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApprovalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalRequest) ProtoMessage() {}

func (x *ApprovalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalRequest.ProtoReflect.Descriptor instead.
func (*ApprovalRequest) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{1}
}

func (x *ApprovalRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApprovalRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ApprovalRequest) GetApprovers() []*Identity {
	if x != nil {
		return x.Approvers
	}
	return nil
}

func (x *ApprovalRequest) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *ApprovalRequest) GetBatchRequest() *BatchRequest {
	if x != nil {
		return x.BatchRequest
	}
	return nil
}

func (x *ApprovalRequest) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

func (x *ApprovalRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ApprovalRequest) GetName() []*LocaleField {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ApprovalRequest) GetDescription() []*LocaleField {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ApprovalRequest) GetPriority() Priority {
	if x != nil {
		return x.Priority
	}
	return Priority_LOW
}

func (x *ApprovalRequest) GetMedium() []Medium {
	if x != nil {
		return x.Medium
	}
	return nil
}

func (x *ApprovalRequest) GetRequester() *Identity {
	if x != nil {
		return x.Requester
	}
	return nil
}

func (x *ApprovalRequest) GetRequestee() *Identity {
	if x != nil {
		return x.Requestee
	}
	return nil
}

func (x *ApprovalRequest) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *ApprovalRequest) GetApprovalCriteria() *ApprovalCriteria {
	if x != nil {
		return x.ApprovalCriteria
	}
	return nil
}

func (x *ApprovalRequest) GetApprovedBy() []*Identity {
	if x != nil {
		return x.ApprovedBy
	}
	return nil
}

func (x *ApprovalRequest) GetRejectedBy() []*Identity {
	if x != nil {
		return x.RejectedBy
	}
	return nil
}

func (x *ApprovalRequest) GetCompletedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedDate
	}
	return nil
}

func (x *ApprovalRequest) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_PENDING
}

func (x *ApprovalRequest) GetRequestedTarget() *RequestedTarget {
	if x != nil {
		return x.RequestedTarget
	}
	return nil
}

func (x *ApprovalRequest) GetReferenceData() []*Reference {
	if x != nil {
		return x.ReferenceData
	}
	return nil
}

func (x *ApprovalRequest) GetAdditionalAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.AdditionalAttributes
	}
	return nil
}

func (x *ApprovalRequest) GetAutoApprove() AutoApproveType {
	if x != nil {
		return x.AutoApprove
	}
	return AutoApproveType_AUTO_DIRECT
}

func (x *ApprovalRequest) GetApprovalConfig() *ApprovalConfig {
	if x != nil {
		return x.ApprovalConfig
	}
	return nil
}

func (x *ApprovalRequest) GetSerialStep() uint64 {
	if x != nil {
		return x.SerialStep
	}
	return 0
}

func (x *ApprovalRequest) GetEscalationStep() uint64 {
	if x != nil {
		return x.EscalationStep
	}
	return 0
}

func (x *ApprovalRequest) GetCoolField() string {
	if x != nil {
		return x.CoolField
	}
	return ""
}

type BatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BatchId       string                 `protobuf:"bytes,1,opt,name=batchId,proto3" json:"batchId,omitempty"`
	BatchSize     uint64                 `protobuf:"varint,2,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchRequest) Reset() {
	*x = BatchRequest{}
	mi := &file_approval_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRequest) ProtoMessage() {}

func (x *BatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRequest.ProtoReflect.Descriptor instead.
func (*BatchRequest) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{2}
}

func (x *BatchRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *BatchRequest) GetBatchSize() uint64 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

type Identity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IdentityId    string                 `protobuf:"bytes,1,opt,name=identityId,proto3" json:"identityId,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	OwnerOf       []*Reference           `protobuf:"bytes,4,rep,name=ownerOf,proto3" json:"ownerOf,omitempty"`
	Members       []*Reference           `protobuf:"bytes,5,rep,name=members,proto3" json:"members,omitempty"`
	SerialOrder   uint64                 `protobuf:"varint,6,opt,name=serial_order,json=serialOrder,proto3" json:"serial_order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Identity) Reset() {
	*x = Identity{}
	mi := &file_approval_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{3}
}

func (x *Identity) GetIdentityId() string {
	if x != nil {
		return x.IdentityId
	}
	return ""
}

func (x *Identity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Identity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Identity) GetOwnerOf() []*Reference {
	if x != nil {
		return x.OwnerOf
	}
	return nil
}

func (x *Identity) GetMembers() []*Reference {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Identity) GetSerialOrder() uint64 {
	if x != nil {
		return x.SerialOrder
	}
	return 0
}

type LocaleField struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Locale        string                 `protobuf:"bytes,2,opt,name=locale,proto3" json:"locale,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocaleField) Reset() {
	*x = LocaleField{}
	mi := &file_approval_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocaleField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocaleField) ProtoMessage() {}

func (x *LocaleField) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocaleField.ProtoReflect.Descriptor instead.
func (*LocaleField) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{4}
}

func (x *LocaleField) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *LocaleField) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type Comment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommentId     string                 `protobuf:"bytes,1,opt,name=commentId,proto3" json:"commentId,omitempty"`
	Author        *Identity              `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Comment       string                 `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	CreatedDate   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Comment) Reset() {
	*x = Comment{}
	mi := &file_approval_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{5}
}

func (x *Comment) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

func (x *Comment) GetAuthor() *Identity {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Comment) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Comment) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

type ApprovalCriteria struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Type          ApprovalCriteriaType         `protobuf:"varint,1,opt,name=type,proto3,enum=approval.request.ApprovalCriteriaType" json:"type,omitempty"`
	Rejection     *ApprovalCriteriaCalculation `protobuf:"bytes,2,opt,name=rejection,proto3" json:"rejection,omitempty"`
	Approval      *ApprovalCriteriaCalculation `protobuf:"bytes,3,opt,name=approval,proto3" json:"approval,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApprovalCriteria) Reset() {
	*x = ApprovalCriteria{}
	mi := &file_approval_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApprovalCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalCriteria) ProtoMessage() {}

func (x *ApprovalCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalCriteria.ProtoReflect.Descriptor instead.
func (*ApprovalCriteria) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{6}
}

func (x *ApprovalCriteria) GetType() ApprovalCriteriaType {
	if x != nil {
		return x.Type
	}
	return ApprovalCriteriaType_SERIAL
}

func (x *ApprovalCriteria) GetRejection() *ApprovalCriteriaCalculation {
	if x != nil {
		return x.Rejection
	}
	return nil
}

func (x *ApprovalCriteria) GetApproval() *ApprovalCriteriaCalculation {
	if x != nil {
		return x.Approval
	}
	return nil
}

type ApprovalCriteriaCalculation struct {
	state           protoimpl.MessageState          `protogen:"open.v1"`
	CalculationType ApprovalCriteriaCalculationType `protobuf:"varint,1,opt,name=calculationType,proto3,enum=approval.request.ApprovalCriteriaCalculationType" json:"calculationType,omitempty"`
	Value           uint64                          `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ApprovalCriteriaCalculation) Reset() {
	*x = ApprovalCriteriaCalculation{}
	mi := &file_approval_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApprovalCriteriaCalculation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalCriteriaCalculation) ProtoMessage() {}

func (x *ApprovalCriteriaCalculation) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalCriteriaCalculation.ProtoReflect.Descriptor instead.
func (*ApprovalCriteriaCalculation) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{7}
}

func (x *ApprovalCriteriaCalculation) GetCalculationType() ApprovalCriteriaCalculationType {
	if x != nil {
		return x.CalculationType
	}
	return ApprovalCriteriaCalculationType_COUNT
}

func (x *ApprovalCriteriaCalculation) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// what enums for types?
type RequestedTarget struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TargetType    string                 `protobuf:"bytes,3,opt,name=targetType,proto3" json:"targetType,omitempty"`
	RequestType   string                 `protobuf:"bytes,4,opt,name=requestType,proto3" json:"requestType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestedTarget) Reset() {
	*x = RequestedTarget{}
	mi := &file_approval_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestedTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestedTarget) ProtoMessage() {}

func (x *RequestedTarget) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestedTarget.ProtoReflect.Descriptor instead.
func (*RequestedTarget) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{8}
}

func (x *RequestedTarget) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestedTarget) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RequestedTarget) GetTargetType() string {
	if x != nil {
		return x.TargetType
	}
	return ""
}

func (x *RequestedTarget) GetRequestType() string {
	if x != nil {
		return x.RequestType
	}
	return ""
}

// what enums for type?
type Reference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reference) Reset() {
	*x = Reference{}
	mi := &file_approval_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{9}
}

func (x *Reference) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Reference) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Reference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ApprovalConfig struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TenantId         string                 `protobuf:"bytes,1,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	Id               string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Scope            ApprovalConfigScope    `protobuf:"varint,3,opt,name=scope,proto3,enum=approval.request.ApprovalConfigScope" json:"scope,omitempty"`
	ReminderConfig   *ReminderConfig        `protobuf:"bytes,4,opt,name=reminderConfig,proto3" json:"reminderConfig,omitempty"`
	EscalationConfig *EscalationConfig      `protobuf:"bytes,5,opt,name=escalationConfig,proto3" json:"escalationConfig,omitempty"`
	TimeoutConfig    *TimeoutConfig         `protobuf:"bytes,6,opt,name=timeoutConfig,proto3" json:"timeoutConfig,omitempty"`
	CronTimezone     *CronTimezone          `protobuf:"bytes,7,opt,name=cronTimezone,proto3" json:"cronTimezone,omitempty"`
	SerialChain      []*ChainTier           `protobuf:"bytes,8,rep,name=serialChain,proto3" json:"serialChain,omitempty"`
	RequiresComment  RequireCommentType     `protobuf:"varint,9,opt,name=requiresComment,proto3,enum=approval.request.RequireCommentType" json:"requiresComment,omitempty"`
	FallbackAppover  *Identity              `protobuf:"bytes,10,opt,name=fallbackAppover,proto3" json:"fallbackAppover,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ApprovalConfig) Reset() {
	*x = ApprovalConfig{}
	mi := &file_approval_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApprovalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalConfig) ProtoMessage() {}

func (x *ApprovalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalConfig.ProtoReflect.Descriptor instead.
func (*ApprovalConfig) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{10}
}

func (x *ApprovalConfig) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ApprovalConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApprovalConfig) GetScope() ApprovalConfigScope {
	if x != nil {
		return x.Scope
	}
	return ApprovalConfigScope_APPROVAL_REQUEST
}

func (x *ApprovalConfig) GetReminderConfig() *ReminderConfig {
	if x != nil {
		return x.ReminderConfig
	}
	return nil
}

func (x *ApprovalConfig) GetEscalationConfig() *EscalationConfig {
	if x != nil {
		return x.EscalationConfig
	}
	return nil
}

func (x *ApprovalConfig) GetTimeoutConfig() *TimeoutConfig {
	if x != nil {
		return x.TimeoutConfig
	}
	return nil
}

func (x *ApprovalConfig) GetCronTimezone() *CronTimezone {
	if x != nil {
		return x.CronTimezone
	}
	return nil
}

func (x *ApprovalConfig) GetSerialChain() []*ChainTier {
	if x != nil {
		return x.SerialChain
	}
	return nil
}

func (x *ApprovalConfig) GetRequiresComment() RequireCommentType {
	if x != nil {
		return x.RequiresComment
	}
	return RequireCommentType_ALL
}

func (x *ApprovalConfig) GetFallbackAppover() *Identity {
	if x != nil {
		return x.FallbackAppover
	}
	return nil
}

type ReminderConfig struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Enabled                bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	DaysUntilFirstReminder uint64                 `protobuf:"varint,2,opt,name=daysUntilFirstReminder,proto3" json:"daysUntilFirstReminder,omitempty"`
	ReminderCronSchedule   string                 `protobuf:"bytes,3,opt,name=reminderCronSchedule,proto3" json:"reminderCronSchedule,omitempty"`
	MaxReminders           uint64                 `protobuf:"varint,4,opt,name=maxReminders,proto3" json:"maxReminders,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ReminderConfig) Reset() {
	*x = ReminderConfig{}
	mi := &file_approval_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReminderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReminderConfig) ProtoMessage() {}

func (x *ReminderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReminderConfig.ProtoReflect.Descriptor instead.
func (*ReminderConfig) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{11}
}

func (x *ReminderConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ReminderConfig) GetDaysUntilFirstReminder() uint64 {
	if x != nil {
		return x.DaysUntilFirstReminder
	}
	return 0
}

func (x *ReminderConfig) GetReminderCronSchedule() string {
	if x != nil {
		return x.ReminderCronSchedule
	}
	return ""
}

func (x *ReminderConfig) GetMaxReminders() uint64 {
	if x != nil {
		return x.MaxReminders
	}
	return 0
}

type EscalationConfig struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Enabled                  bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	DaysUntilFirstEscalation uint64                 `protobuf:"varint,2,opt,name=daysUntilFirstEscalation,proto3" json:"daysUntilFirstEscalation,omitempty"`
	EscalationCronSchedule   string                 `protobuf:"bytes,3,opt,name=escalationCronSchedule,proto3" json:"escalationCronSchedule,omitempty"`
	EscalationChain          []*ChainTier           `protobuf:"bytes,4,rep,name=escalationChain,proto3" json:"escalationChain,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *EscalationConfig) Reset() {
	*x = EscalationConfig{}
	mi := &file_approval_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EscalationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EscalationConfig) ProtoMessage() {}

func (x *EscalationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EscalationConfig.ProtoReflect.Descriptor instead.
func (*EscalationConfig) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{12}
}

func (x *EscalationConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *EscalationConfig) GetDaysUntilFirstEscalation() uint64 {
	if x != nil {
		return x.DaysUntilFirstEscalation
	}
	return 0
}

func (x *EscalationConfig) GetEscalationCronSchedule() string {
	if x != nil {
		return x.EscalationCronSchedule
	}
	return ""
}

func (x *EscalationConfig) GetEscalationChain() []*ChainTier {
	if x != nil {
		return x.EscalationChain
	}
	return nil
}

type TimeoutConfig struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Enabled          bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	DaysUntilTimeout uint64                 `protobuf:"varint,2,opt,name=daysUntilTimeout,proto3" json:"daysUntilTimeout,omitempty"`
	TimeoutResult    Status                 `protobuf:"varint,3,opt,name=timeoutResult,proto3,enum=approval.request.Status" json:"timeoutResult,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TimeoutConfig) Reset() {
	*x = TimeoutConfig{}
	mi := &file_approval_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeoutConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeoutConfig) ProtoMessage() {}

func (x *TimeoutConfig) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeoutConfig.ProtoReflect.Descriptor instead.
func (*TimeoutConfig) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{13}
}

func (x *TimeoutConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TimeoutConfig) GetDaysUntilTimeout() uint64 {
	if x != nil {
		return x.DaysUntilTimeout
	}
	return 0
}

func (x *TimeoutConfig) GetTimeoutResult() Status {
	if x != nil {
		return x.TimeoutResult
	}
	return Status_PENDING
}

type CronTimezone struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Location      string                 `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Offset        string                 `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CronTimezone) Reset() {
	*x = CronTimezone{}
	mi := &file_approval_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CronTimezone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronTimezone) ProtoMessage() {}

func (x *CronTimezone) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronTimezone.ProtoReflect.Descriptor instead.
func (*CronTimezone) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{14}
}

func (x *CronTimezone) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CronTimezone) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

type ChainTier struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainId       string                 `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	Tier          uint64                 `protobuf:"varint,2,opt,name=tier,proto3" json:"tier,omitempty"`
	IdentityId    string                 `protobuf:"bytes,3,opt,name=identityId,proto3" json:"identityId,omitempty"`
	IdentityType  ChainIdentityType      `protobuf:"varint,4,opt,name=identityType,proto3,enum=approval.request.ChainIdentityType" json:"identityType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChainTier) Reset() {
	*x = ChainTier{}
	mi := &file_approval_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChainTier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainTier) ProtoMessage() {}

func (x *ChainTier) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainTier.ProtoReflect.Descriptor instead.
func (*ChainTier) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{15}
}

func (x *ChainTier) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *ChainTier) GetTier() uint64 {
	if x != nil {
		return x.Tier
	}
	return 0
}

func (x *ChainTier) GetIdentityId() string {
	if x != nil {
		return x.IdentityId
	}
	return ""
}

func (x *ChainTier) GetIdentityType() ChainIdentityType {
	if x != nil {
		return x.IdentityType
	}
	return ChainIdentityType_IDENTITY
}

var File_approval_proto protoreflect.FileDescriptor

var file_approval_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x65, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4d, 0x0a, 0x10, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xdf, 0x0c, 0x0a, 0x0f, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x42, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x38, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x42, 0x79, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x0a, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x40, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x6f, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x75,
	0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x65,
	0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x53,
	0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x65, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x5f, 0x0a, 0x19, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x46, 0x0a, 0x0c, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x4f, 0x66, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x66, 0x12, 0x35,
	0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x3b, 0x0a, 0x0b, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x10,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x09,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x08, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x22, 0x90, 0x01, 0x0a, 0x1b, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x77, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x43, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf3, 0x04, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x48, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x72, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x10, 0x65,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x65, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x72, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x41, 0x70, 0x70, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x66, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x41, 0x70, 0x70, 0x6f, 0x76, 0x65, 0x72, 0x22, 0xba, 0x01, 0x0a, 0x0e,
	0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x61, 0x79, 0x73,
	0x55, 0x6e, 0x74, 0x69, 0x6c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x64, 0x61, 0x79, 0x73, 0x55, 0x6e,
	0x74, 0x69, 0x6c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x6d, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x52,
	0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x10, 0x45, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x64, 0x61, 0x79, 0x73, 0x55,
	0x6e, 0x74, 0x69, 0x6c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x64, 0x61, 0x79, 0x73, 0x55,
	0x6e, 0x74, 0x69, 0x6c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x72, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x65,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x65,
	0x72, 0x52, 0x0f, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x64, 0x61, 0x79, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x61, 0x79, 0x73, 0x55, 0x6e,
	0x74, 0x69, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x42, 0x0a, 0x0c, 0x43, 0x72,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xa2,
	0x01, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0c, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x2a, 0x4d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x04, 0x2a, 0x29, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x07,
	0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55,
	0x4d, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x2a, 0x29, 0x0a,
	0x06, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x54, 0x45, 0x41, 0x4d, 0x53, 0x10, 0x02, 0x2a, 0x30, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x50, 0x41, 0x52, 0x41, 0x4c, 0x4c, 0x45, 0x4c, 0x10, 0x01, 0x2a, 0x39, 0x0a, 0x1f, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x43,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0x43, 0x0a, 0x0f, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x55, 0x54, 0x4f,
	0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x55, 0x54,
	0x4f, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x55, 0x54, 0x4f, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x2a, 0x5d, 0x0a, 0x13, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x4f, 0x4d, 0x41, 0x49,
	0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x10, 0x03, 0x2a, 0x43, 0x0a, 0x12, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x03, 0x2a, 0x9a,
	0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x4f, 0x46,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x4f,
	0x4c, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4f, 0x57, 0x4e,
	0x45, 0x52, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x06, 0x42, 0x30, 0x5a, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x61, 0x76, 0x69, 0x73,
	0x2d, 0x77, 0x69, 0x73, 0x63, 0x68, 0x2d, 0x73, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d,
	0x74, 0x65, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_approval_proto_rawDescOnce sync.Once
	file_approval_proto_rawDescData []byte
)

func file_approval_proto_rawDescGZIP() []byte {
	file_approval_proto_rawDescOnce.Do(func() {
		file_approval_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_approval_proto_rawDesc), len(file_approval_proto_rawDesc)))
	})
	return file_approval_proto_rawDescData
}

var file_approval_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_approval_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_approval_proto_goTypes = []any{
	(Status)(0),                          // 0: approval.request.Status
	(Priority)(0),                        // 1: approval.request.Priority
	(Medium)(0),                          // 2: approval.request.Medium
	(ApprovalCriteriaType)(0),            // 3: approval.request.ApprovalCriteriaType
	(ApprovalCriteriaCalculationType)(0), // 4: approval.request.ApprovalCriteriaCalculationType
	(AutoApproveType)(0),                 // 5: approval.request.AutoApproveType
	(ApprovalConfigScope)(0),             // 6: approval.request.ApprovalConfigScope
	(RequireCommentType)(0),              // 7: approval.request.RequireCommentType
	(ChainIdentityType)(0),               // 8: approval.request.ChainIdentityType
	(*ApprovalRequestQuery)(nil),         // 9: approval.request.ApprovalRequestQuery
	(*ApprovalRequest)(nil),              // 10: approval.request.ApprovalRequest
	(*BatchRequest)(nil),                 // 11: approval.request.BatchRequest
	(*Identity)(nil),                     // 12: approval.request.Identity
	(*LocaleField)(nil),                  // 13: approval.request.LocaleField
	(*Comment)(nil),                      // 14: approval.request.Comment
	(*ApprovalCriteria)(nil),             // 15: approval.request.ApprovalCriteria
	(*ApprovalCriteriaCalculation)(nil),  // 16: approval.request.ApprovalCriteriaCalculation
	(*RequestedTarget)(nil),              // 17: approval.request.RequestedTarget
	(*Reference)(nil),                    // 18: approval.request.Reference
	(*ApprovalConfig)(nil),               // 19: approval.request.ApprovalConfig
	(*ReminderConfig)(nil),               // 20: approval.request.ReminderConfig
	(*EscalationConfig)(nil),             // 21: approval.request.EscalationConfig
	(*TimeoutConfig)(nil),                // 22: approval.request.TimeoutConfig
	(*CronTimezone)(nil),                 // 23: approval.request.CronTimezone
	(*ChainTier)(nil),                    // 24: approval.request.ChainTier
	nil,                                  // 25: approval.request.ApprovalRequest.AdditionalAttributesEntry
	(*timestamppb.Timestamp)(nil),        // 26: google.protobuf.Timestamp
	(*structpb.Value)(nil),               // 27: google.protobuf.Value
}
var file_approval_proto_depIdxs = []int32{
	10, // 0: approval.request.ApprovalRequestQuery.approvalRequests:type_name -> approval.request.ApprovalRequest
	12, // 1: approval.request.ApprovalRequest.approvers:type_name -> approval.request.Identity
	26, // 2: approval.request.ApprovalRequest.createdDate:type_name -> google.protobuf.Timestamp
	11, // 3: approval.request.ApprovalRequest.batchRequest:type_name -> approval.request.BatchRequest
	26, // 4: approval.request.ApprovalRequest.dueDate:type_name -> google.protobuf.Timestamp
	13, // 5: approval.request.ApprovalRequest.name:type_name -> approval.request.LocaleField
	13, // 6: approval.request.ApprovalRequest.description:type_name -> approval.request.LocaleField
	1,  // 7: approval.request.ApprovalRequest.priority:type_name -> approval.request.Priority
	2,  // 8: approval.request.ApprovalRequest.medium:type_name -> approval.request.Medium
	12, // 9: approval.request.ApprovalRequest.requester:type_name -> approval.request.Identity
	12, // 10: approval.request.ApprovalRequest.requestee:type_name -> approval.request.Identity
	14, // 11: approval.request.ApprovalRequest.comments:type_name -> approval.request.Comment
	15, // 12: approval.request.ApprovalRequest.approvalCriteria:type_name -> approval.request.ApprovalCriteria
	12, // 13: approval.request.ApprovalRequest.ApprovedBy:type_name -> approval.request.Identity
	12, // 14: approval.request.ApprovalRequest.RejectedBy:type_name -> approval.request.Identity
	26, // 15: approval.request.ApprovalRequest.completedDate:type_name -> google.protobuf.Timestamp
	0,  // 16: approval.request.ApprovalRequest.status:type_name -> approval.request.Status
	17, // 17: approval.request.ApprovalRequest.requestedTarget:type_name -> approval.request.RequestedTarget
	18, // 18: approval.request.ApprovalRequest.referenceData:type_name -> approval.request.Reference
	25, // 19: approval.request.ApprovalRequest.additionalAttributes:type_name -> approval.request.ApprovalRequest.AdditionalAttributesEntry
	5,  // 20: approval.request.ApprovalRequest.autoApprove:type_name -> approval.request.AutoApproveType
	19, // 21: approval.request.ApprovalRequest.approvalConfig:type_name -> approval.request.ApprovalConfig
	18, // 22: approval.request.Identity.ownerOf:type_name -> approval.request.Reference
	18, // 23: approval.request.Identity.members:type_name -> approval.request.Reference
	12, // 24: approval.request.Comment.author:type_name -> approval.request.Identity
	26, // 25: approval.request.Comment.createdDate:type_name -> google.protobuf.Timestamp
	3,  // 26: approval.request.ApprovalCriteria.type:type_name -> approval.request.ApprovalCriteriaType
	16, // 27: approval.request.ApprovalCriteria.rejection:type_name -> approval.request.ApprovalCriteriaCalculation
	16, // 28: approval.request.ApprovalCriteria.approval:type_name -> approval.request.ApprovalCriteriaCalculation
	4,  // 29: approval.request.ApprovalCriteriaCalculation.calculationType:type_name -> approval.request.ApprovalCriteriaCalculationType
	6,  // 30: approval.request.ApprovalConfig.scope:type_name -> approval.request.ApprovalConfigScope
	20, // 31: approval.request.ApprovalConfig.reminderConfig:type_name -> approval.request.ReminderConfig
	21, // 32: approval.request.ApprovalConfig.escalationConfig:type_name -> approval.request.EscalationConfig
	22, // 33: approval.request.ApprovalConfig.timeoutConfig:type_name -> approval.request.TimeoutConfig
	23, // 34: approval.request.ApprovalConfig.cronTimezone:type_name -> approval.request.CronTimezone
	24, // 35: approval.request.ApprovalConfig.serialChain:type_name -> approval.request.ChainTier
	7,  // 36: approval.request.ApprovalConfig.requiresComment:type_name -> approval.request.RequireCommentType
	12, // 37: approval.request.ApprovalConfig.fallbackAppover:type_name -> approval.request.Identity
	24, // 38: approval.request.EscalationConfig.escalationChain:type_name -> approval.request.ChainTier
	0,  // 39: approval.request.TimeoutConfig.timeoutResult:type_name -> approval.request.Status
	8,  // 40: approval.request.ChainTier.identityType:type_name -> approval.request.ChainIdentityType
	27, // 41: approval.request.ApprovalRequest.AdditionalAttributesEntry.value:type_name -> google.protobuf.Value
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_approval_proto_init() }
func file_approval_proto_init() {
	if File_approval_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_approval_proto_rawDesc), len(file_approval_proto_rawDesc)),
			NumEnums:      9,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_approval_proto_goTypes,
		DependencyIndexes: file_approval_proto_depIdxs,
		EnumInfos:         file_approval_proto_enumTypes,
		MessageInfos:      file_approval_proto_msgTypes,
	}.Build()
	File_approval_proto = out.File
	file_approval_proto_goTypes = nil
	file_approval_proto_depIdxs = nil
}
